[user]
	name = NAME
	email = EMAIL

[init]
	defaultBranch = main

[core]
	# always checkout as LF, but correct accidental CRLF on input
	# ref http://git-scm.com/book/en/v2/Customizing-Git-Git-Configuration#Formatting-and-Whitespace
	autocrlf = input
	whitespace = fix,space-before-tab,tab-in-indent,trailing-space
	excludesfile = ~/.dotfiles/conf/gitignore.conf
	fileMode = false

[apply]
	whitespace = warn

[push]
	# create an upstream automatically when pushing
	default = current

[pull]
	# rebase by default when pulling
	rebase = true

[remote "origin"]
	# prune deleted branches automatically when fetching from origin
	prune = true

[rerere]
	# reuse recorded resolution when resolving conflicts
	enabled = 1

[alias]
	# list aliases
	aliases = "config --get-regexp alias"
	praise = blame
	br = branch -vv --sort=-committerdate
	brw = for-each-ref --sort='authordate:iso8601' --format=' %(color:green)%(authordate:relative)%09%(color:white)%(refname:short)%09%09%09%09%(subject)' refs/heads
	brww = log --pretty=format:'%(authordate:relative)  %<(20)%an %s' -10
	ci = commit
	co = checkout
	cl = clone
	df = diff
	# diff staged files
	dfs = diff --staged
	# overwrite previous commit without editing message
	amend = !git add . && git commit --amend --no-edit
	# stage patch
	p = add -p
	dt = difftool
	g = grep -I
	lg = log --graph --date=short --pretty=format:'%C(red)%h %Cgreen(%cr) %C(cyan)<%an> %Creset%s %C(yellow)%d'
	lgd = !git lg $(git main-branch)..HEAD
	lgm = !git lg master..HEAD
	# list lightweight and annotated tags
	# https://stackoverflow.com/a/21032332
	tags-lightweight = "!git for-each-ref --sort=creatordate refs/tags/ --format '%(objecttype) %(refname:short)' | while read ty name; do [ $ty = commit ] && echo $name; done"
	tags-annotated = "!git for-each-ref --sort=creatordate refs/tags/ --format '%(objecttype) %(refname:short)' | while read ty name; do [ $ty = tag ] && echo $name; done"
	rv = review
	st = status -b
	# pull, then push
	pp = "!echo pulling ...; git pull; echo pushing ...; git push"
	ps = push
	pl = pull
	# stash current changes, pull, then pop the stash on top
	pls = "!echo stashing..; git s; echo pulling..; git pull; echo popping..; git sp"
	# clean branches merged with master
	cleanup = !git branch --merged | grep  -v '\\*\\|master\\|dev' | xargs -n 1 git branch -d
	# returns the root path of the repository
	# for use with "alias cr=$(cd git root)'
	root = !pwd
	ksdiff = difftool -y -t kaleidoscope
	jsondiff = difftool -y -t jsondiff
	# print current sha
	sha = rev-parse --short HEAD
	# stash all current work
	s = stash --include-untracked
	# stash only untracked files
	su = "!git stash; git stash -u; git stash pop stash@{1}"
	# pop stash
	sp = stash pop
	# pop head commit
	rh = reset HEAD^
	# commit all changes as a "wip commit"
	# Commiting as "WIP", then reopening the commit is often more tidy than
	# using stash, as stash is hard to track across branches when you have
	# many parallell works in progress
	wip = "!cd $(git root); git add .; git commit --no-verify -m 'WIP'"

	# rebase onto latest "main" branch
	rd = !git rebase $(git main-branch)
	rc = rebase --continue
	# on a branch: pull in latest changes from main branch and rebase branch on top of it 
	rb = !git wip && && git checkout $(git main-branch) && git pull && git checkout - && git rd && git rh

	# get the name of the main branch as defined at the origin remote
	# can be main/master/development/develop etc.
	main-branch = !git remote show origin | grep 'HEAD' | cut -d':' -f2 | sed -e 's/^ *//g' -e 's/ *$//g'

	# checkout "main" branch
	d = !git checkout $(git main-branch)

	# remove branches where the upstream is gone (typically merged but diverged
 	# https://stackoverflow.com/a/33548037
	remove-gone = !git fetch -p && for branch in $(git for-each-ref --format '%(refname) %(upstream:track)' refs/heads | awk '$2 == [gone] {sub(refs/heads/, , $1) ; print $1}'); do git branch -D $branch; done

#############################################################
[color]
	ui = auto

[color "branch"]
	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]
	meta = yellow bold
	frag = magenta bold
	old = red bold
	new = green bold

[color "status"]
	added = yellow
	changed = green
	untracked = cyan

############################################################
[diff]
	tool = idea
[merge]
	tool = idea
	log = true

[difftool]
	prompt = false
[mergetool]
	prompt = false

# Intellij IDEA
[difftool "idea"]
	cmd = idea diff $LOCAL $REMOTE
[mergetool "idea"]
	cmd = idea merge $LOCAL $REMOTE $BASE $MERGED

# json-diff
# https://www.npmjs.com/package/json-diff
[difftool "jsondiff"]
	cmd = json-diff $LOCAL $REMOTE
[log]
	decorate = true
	abbrevCommit = true
[init]
	defaultBranch = main
[filesystem "Ubuntu|11.0.11|C:\\"]
	timestampResolution = 509 milliseconds
	minRacyThreshold = 0 nanoseconds
[filesystem "Ubuntu|11.0.13|C:\\"]
	timestampResolution = 294 milliseconds
	minRacyThreshold = 0 nanoseconds
[filesystem "Ubuntu|11.0.13|/dev/sdb"]
	timestampResolution = 6000 nanoseconds
	minRacyThreshold = 12381 microseconds
